import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
np.random.seed(42)
X = np.random.rand(100, 5)  # 100 samples, 5 features
y = 2 * X[:, 0] + 3 * X[:, 1] + 4 * X[:, 2] + np.random.randn(100)
df = pd.DataFrame(X, columns=['Feature1', 'Feature2', 'Feature3', 'Feature4', 'Feature5'])
df['Target'] = y
X_train, X_test, y_train, y_test = train_test_split(df.drop('Target', axis=1), df['Target'], test_size=0.2, random_state=42)
def plot_mse_vs_step(mse_values):
    plt.plot(range(1, len(mse_values) + 1), mse_values, marker='o')
    plt.xlabel('Step')
    plt.ylabel('MSE')
    plt.title('MSE vs. Step')
    plt.show()
def backward_stepwise_selection(X_train, X_test, y_train, y_test):
    features = list(range(X_train.shape[1]))
    selected_features = []
    min_error = float("inf")
    mse_values = []
    while len(features) > 0:
        mse_list = []
        for feature in features:
            model = LinearRegression()
            selected = selected_features + [feature]
            X_train_subset = X_train.iloc[:, selected]
            X_test_subset = X_test.iloc[:, selected]
            model.fit(X_train_subset, y_train)
            y_pred = model.predict(X_test_subset)
            mse = mean_squared_error(y_test, y_pred)
            mse_list.append(mse)
        best_feature_index = np.argmin(mse_list)
        min_error = min(mse_list)
        selected_features.append(features.pop(best_feature_index))
        mse_values.append(min_error)
        print(f"Step {len(selected_features)}: Removed Feature {selected_features[-1]}, MSE = {min_error:.4f}")
    plot_mse_vs_step(mse_values)
    return selected_features
selected_features_backward = backward_stepwise_selection(X_train, X_test, y_train, y_test)
print("\nSelected Features:", selected_features_backward)
